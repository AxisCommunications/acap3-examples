name: Build Applications

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      #- uses: actions/checkout@master
      # this will enable shellCheck to be performed
      # on every push to the repo.
    #- name: Run ShellCheck
      #uses: ludeeus/action-shellcheck@master
      # If shellCheck complains about unnecessery things, ignore it.
      #env:
        #SHELLCHECK_OPTS: -e SC2153 -e SC2148
    # Run build script larod application
    - name: Build larod application
      run: |
        export http_proxy=http://wwwproxy.se.axis.com:3128
        export https_proxy=http://wwwproxy.se.axis.com:3128
        cd larod
        docker build --tag larod-simple-app:1.0 .
        docker cp $(docker create larod-simple-app:1.0):/opt/app ./build
        cd ..
      #mkdir -p acap3/examples/larod/build
      #cp larod/build/larod-simple-app_1_0_0_armv7hf.eap acap3/examples/larod/build/larod-simple-app_1_0_0_armv7hf.eap
        
    # Save larop application *.eap file as artifact
   # - uses: actions/upload-artifact@master
   #   with:
   #     name: larod application
   #     path: larod/build/
        
    # Build VDO stream application
    - name: Build vdo stream application
      run: |        
        cd vdostream
        docker build --tag axisecp/vdoencodeclient:1.0 .
        docker cp $(docker create axisecp/vdoencodeclient:1.0):/opt/app ./build
        cd ..
      #  mkdir -p acap3/examples/vdostream/build
      #  cp vdostream/build/vdoencodeclient_1_0_0_armv7hf.eap acap3/examples/vdostream/build/vdoencodeclient_1_0_0_armv7hf.eap
        
    # Save VDO stream application *.eap file as artifact
   # - uses: actions/upload-artifact@master
   #   with:
   #     name: vdo stream application
   #     path: vdostream/build/
        
    # Build VDO larod application to run on CPU
    - name: Build VDO larod application to run on CPU
      run: |
        docker login -u ${{ secrets.DOCKERHUB_USER }} -p ${{ secrets.DOCKERHUB_PASS }} 
        cd vdo-larod
        cp app/package.conf.cpu app/package.conf
        docker build --build-arg http_proxy=http://wwwproxy.se.axis.com:3128 --build-arg https_proxy=http://wwwproxy.se.axis.com:3128 --tag vdo_larod_cpu:1.0 .
        docker cp $(docker create vdo_larod_cpu:1.0):/opt/app ./build
        cd ..
      #  mkdir -p acap3/examples/vdo-larod
      #  cp vdo-larod/build/vdo_larod_cpu_1_0_0_armv7hf.eap acap3/examples/vdo-larod/vdo_larod_cpu_1_0_0_armv7hf.eap
        
    # Save VDO larod application *.eap file as artifact
   # - uses: actions/upload-artifact@master
   #   with:
   #     name: CPU vdo-larod application
   #     path: vdo-larod/build/
        
    # Build VDO larod application to run on TPU
    - name: Build VDO larod application to run on TPU
      run: | 
        docker login -u ${{ secrets.DOCKERHUB_USER }} -p ${{ secrets.DOCKERHUB_PASS }}        
        cd vdo-larod
        cp app/package.conf.edgetpu app/package.conf
        docker build --build-arg http_proxy=http://wwwproxy.se.axis.com:3128 --build-arg https_proxy=http://wwwproxy.se.axis.com:3128 --tag vdo_larod_tpu:1.0 .
        docker cp $(docker create vdo_larod_tpu:1.0):/opt/app ./build
        cd ..        
      #  mkdir -p acap3/examples/vdo-larod/build
      #  cp vdo-larod/build/vdo_larod_edgetpu_1_0_0_armv7hf.eap acap3/examples/vdo-larod/build/vdo_larod_edgetpu_1_0_0_armv7hf.eap
               
    # Save VDO larod application *.eap file as artifact
   # - uses: actions/upload-artifact@master
   #   with:
   #     name: TPU vdo-larod application
    #    path: vdo-larod/build/
    
    # Build Send event application
    - name: Build Send event application
      run: |        
        cd axevent
        cd send_event
        docker build --tag send-event:1.0 .
        docker cp $(docker create send-event:1.0):/opt/app ./build
        cd ..
        cd ..
        mkdir -p acap3/examples/axevent/send_event/build
        
     # cp axevent/send_event/build/send_event_1_0_0_armv7hf.eap acap3/examples/axevent/send_event/build/send_event_1_0_0_armv7hf.eap
     #   ls /github-runner/github-runner/_work/acap3-examples/acap3-examples/acap3/examples/axevent

    # Save Send Event application *.eap file as artifact
    #- uses: actions/upload-artifact@master
    #  with:
    #    name: Send Event application
    #    path: axevent/send_event/build/
    
    # Build Subscribe to event application
    - name: Build subscribe to event application
      run: |
        ls         
        cd axevent
        cd subscribe_to_event
        docker build --tag subscribe-to-event:1.0 .
        docker cp $(docker create subscribe-to-event:1.0):/opt/app ./build
        cd ..
        cd ..
     #   mkdir -p acap3/examples/axevent/subscribe_to_event/build
     #   cp axevent/subscribe_to_event/build/subscribe_to_event_1_0_0_armv7hf.eap acap3/examples/axevent/subscribe_to_event/build/subscribe_to_event_1_0_0_armv7hf.eap
        
    # Save Subscribe to Event application *.eap file as artifact
   # - uses: actions/upload-artifact@master
   #   with:
   #     name: Subscribe to Event application
   #     path: axevent/subscribe_to_event/build/
              
    # Build Subscribe to events application
    - name: Build subscribe to events application
      run: |        
        cd axevent
        cd subscribe_to_events
        docker build --tag subscribe-to-events:1.0 .
        docker cp $(docker create subscribe-to-events:1.0):/opt/app ./build
        cd ..
        cd ..
        
     #   mkdir -p acap3/examples/axevent/subscribe_to_events/build
     #   cp axevent/subscribe_to_events/build/subscribe_to_events_1_0_0_armv7hf.eap acap3/examples/axevent/subscribe_to_events/build/subscribe_to_events_1_0_0_armv7hf.eap
    
    # Save Subscribe to Events application *.eap file as artifact
    #- uses: actions/upload-artifact@master
    #  with:
    #    name: Subscribe to Events application
    #    path: axevent/subscribe_to_events/build/    
    
    #Build Licensekey handler application
    - name: Build licensekey handler application
      run: |
        cd licensekey
        docker build --tag licensekey_handler:1.0 .
        docker cp $(docker create licensekey_handler:1.0 .):/opt/app ./build
        cd ..  
      
