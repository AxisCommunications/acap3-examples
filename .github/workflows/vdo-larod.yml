name: Build vdo-larod applications
on:
  push:
    paths:
      - 'vdo-larod/**'
      - '!vdo-larod/README.md'
      - '.github/workflows/vdo-larod.yml'
jobs:
  build:
    runs-on: ubuntu-latest
    env:
      EXNAME: vdo-larod
      EAPNAME: vdo_larod
    steps:
      - uses: actions/checkout@v2

      - name: Build ${{ env.example }} application
        env:
          example: ${{ env.EXNAME }}-cpu
          imagetag: ${{ env.EXNAME }}-cpu:1.0
          eapfile: ${{ env.EAPNAME }}_cpu_1_0_0_armv7hf.eap
          exdir: ${{ env.EXNAME }}/build_cpu
        run: |
          docker image rm -f $imagetag
          cd $EXNAME
          cp app/manifest.json.cpu app/manifest.json
          docker build --no-cache --build-arg CHIP=cpu --tag $imagetag .
          docker cp $(docker create $imagetag):/opt/app ./build
          cd ..
          mkdir -p $exdir
          cp $EXNAME/build/$eapfile $exdir/$eapfile

      - name: Build ${{ env.example }} application
        env:
          example: ${{ env.EXNAME }}-tpu
          imagetag: ${{ env.EXNAME }}-tpu:1.0
          eapfile: ${{ env.EAPNAME }}_edgetpu_1_0_0_armv7hf.eap
          exdir: ${{ env.EXNAME }}/build_tpu
        run: |
          docker image rm -f $imagetag
          cd $EXNAME
          rm -rf build/
          cp app/manifest.json.edgetpu app/manifest.json
          docker build --no-cache --build-arg CHIP=edgetpu --tag $imagetag .
          docker cp $(docker create $imagetag):/opt/app ./build
          cd ..
          mkdir -p $exdir
          cp $EXNAME/build/$eapfile $exdir/$eapfile
